// controllers/geolocationController.js
import { getPlacesNearUser, getPlacesFromGoogleMaps } from '../services/externalApiService.js';
import { findNearbyPremiumBusinesses } from '../services/premiumBusinessService.js';
import geolocationService from '../services/geolocationService.js';
import { ApiError } from '../middleware/errorHandler.js';

/**
 * Controlador principal para b√∫squedas georreferenciadas optimizadas
 */

/**
 * Procesa consultas con intenci√≥n de proximidad ("cerca de m√≠", "hoteles cercanos", etc.)
 * @param {string} userMessage - Mensaje del usuario
 * @param {Object} userLocation - Coordenadas del usuario {lat, lng}
 * @param {Object} queryAnalysis - An√°lisis de la consulta
 * @returns {Promise<Object>} - Resultado de la b√∫squeda georreferenciada
 */
export async function handleProximityQuery(userMessage, userLocation, queryAnalysis) {
  console.log('üéØ Procesando consulta de proximidad...');
  
  // Validar ubicaci√≥n del usuario
  const validatedLocation = geolocationService.validateAndNormalizeUserLocation(userLocation);
  
  if (!validatedLocation) {
    return {
      error: 'Location required for proximity searches',
      requiresLocation: true
    };
  }
  
  // Determinar par√°metros de b√∫squeda - RADIO FIJO 5KM
  const placeType = queryAnalysis.businessCategory || 'restaurant';
  const radius = 5000; // Radio fijo de 5km para b√∫squedas basadas en ubicaci√≥n del navegador
  
  console.log(`üìç B√∫squeda: tipo=${placeType}, radio=${radius}m (5km) desde ${validatedLocation.lat}, ${validatedLocation.lng}`);
  
  try {
    // Realizar b√∫squeda georreferenciada combinada
    const places = await getPlacesNearUser(
      validatedLocation,
      placeType,
      'es', // Usar idioma por defecto - OpenAI manejar√° la respuesta en el idioma correcto
      radius,
      15 // L√≠mite de resultados
    );
    
    // Generar respuesta contextual b√°sica
    const responseText = generateProximityResponse(places, placeType, radius);
    
    return {
      success: true,
      response: responseText,
      places: places,
      searchRadius: radius,
      totalFound: places.length,
      searchParams: {
        location: validatedLocation,
        placeType: placeType,
        radius: radius,
        resultsCount: places.length
      }
    };
    
  } catch (error) {
    console.error('‚ùå Error en b√∫squeda de proximidad:', error);
    
    return {
      error: 'Could not find nearby places at the moment. Please try again.',
      places: []
    };
  }
}

/**
 * Genera texto de respuesta contextual para b√∫squedas de proximidad
 * @param {Array} places - Lugares encontrados
 * @param {string} placeType - Tipo de lugar buscado
 * @param {number} radius - Radio de b√∫squeda
 * @returns {string} - Texto de respuesta
 */
function generateProximityResponse(places, placeType, radius) {
  if (places.length === 0) {
    return `No places found near your current location for "${placeType}".`;
  }
  
  const premiumCount = places.filter(p => p.isPremium).length;
  const radiusKm = Math.round(radius / 1000 * 10) / 10;
  
  let response = `Found ${places.length} ${placeType} within ${radiusKm}km of your location`;
  
  if (premiumCount > 0) {
    response += `, including ${premiumCount} verified place${premiumCount > 1 ? 's' : ''}`;
  }
  
  response += '. Here are the closest ones:\n\n';
  
  // Agregar los 3 m√°s cercanos con detalles
  places.slice(0, 3).forEach((place, index) => {
    response += `${index + 1}. **${place.name}**`;
    if (place.isPremium) response += ' ‚úÖ';
    if (place.distance_text) response += ` (${place.distance_text})`;
    if (place.rating) response += ` - ‚≠ê ${place.rating}`;
    response += '\n';
    if (place.formatted_address) response += `   üìç ${place.formatted_address}\n`;
  });
  
  return response;
}

/**
 * Determina el radio de b√∫squeda basado en el contexto de la consulta
 * @param {string} userMessage - Mensaje del usuario
 * @param {string} placeType - Tipo de lugar
 * @returns {number} - Radio en metros
 */
export function getContextualSearchRadius(userMessage, placeType) {
  const lowerMessage = userMessage.toLowerCase();
  
  // Palabras clave que indican b√∫squeda muy local
  const veryLocalKeywords = ['caminando', 'walking', 'a pie', 'muy cerca', 'very close'];
  
  // Palabras clave que indican b√∫squeda m√°s amplia
  const broaderKeywords = ['en la ciudad', 'in the city', 'cualquier lugar', 'anywhere'];
  
  if (veryLocalKeywords.some(keyword => lowerMessage.includes(keyword))) {
    return 1000; // 1km para b√∫squedas muy locales
  }
  
  if (broaderKeywords.some(keyword => lowerMessage.includes(keyword))) {
    return 10000; // 10km para b√∫squedas amplias
  }
  
  // Usar radio inteligente basado en tipo de lugar
  return geolocationService.getIntelligentSearchRadius(placeType, null, 'proximity');
}

/**
 * Mejora los datos de lugares con informaci√≥n adicional de contexto
 * @param {Array} places - Lugares a mejorar
 * @param {Object} userLocation - Ubicaci√≥n del usuario
 * @returns {Array} - Lugares mejorados
 */
export function enhancePlacesWithContext(places, userLocation) {
  return places.map(place => {
    const enhanced = { ...place };
    
    // Agregar informaci√≥n de accesibilidad
    if (place.distance !== undefined && place.distance < 0.5) {
      enhanced.walkingTime = '5 min walk';
    } else if (place.distance !== undefined && place.distance < 1) {
      enhanced.walkingTime = '10-15 min walk';
    }
    
    // Agregar contexto de popularidad
    if (place.rating >= 4.5) {
      enhanced.popularityLevel = 'Very popular';
    } else if (place.rating >= 4.0) {
      enhanced.popularityLevel = 'Popular';
    }
    
    return enhanced;
  });
}

/**
 * Analiza si una consulta tiene intenci√≥n de proximidad
 * @param {string} userMessage - Mensaje del usuario
 * @returns {boolean} - True si es una consulta de proximidad
 */
export function isProximityQuery(userMessage) {
  const lowerMessage = userMessage.toLowerCase();
  
  const proximityKeywords = [
    'cerca de m√≠', 'cerca de mi', 'cercano', 'cercana', 'cercanos', 'cercanas',
    'pr√≥ximo', 'proxima', 'pr√≥ximos', 'proximos', 'cerca', 'aqu√≠ cerca',
    'aqui cerca', 'a poca distancia', 'en los alrededores', 'alrededor',
    'en la zona', 'por aqu√≠', 'por aqui', 'nearby', 'close to me',
    'near me', 'near my location', 'closest', 'nearby', 'close to me',
    'around here', 'in the area', 'walking distance', 'proximity',
    'nearest', 'close by', 'around me'
  ];
  
  return proximityKeywords.some(keyword => lowerMessage.includes(keyword));
}

export default {
  handleProximityQuery,
  isProximityQuery,
  getContextualSearchRadius,
  enhancePlacesWithContext
};
