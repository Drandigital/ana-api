// test-real-time-queries.js
// Test completo para todas las consultas en tiempo real solicitadas

import { handleChatRequest } from './controllers/chatController.js';

// Todas las consultas de tiempo real solicitadas por el usuario
const testQueries = [
  // üè® Hoteles (en tiempo real)
  '¬øQu√© hoteles hay cerca de m√≠ ahora?',
  '¬øCu√°l es el hotel m√°s cercano con disponibilidad hoy?',
  '¬øQu√© hoteles econ√≥micos hay abiertos ahora?',
  '¬øD√≥nde puedo hospedarme esta noche cerca de aqu√≠?',
  '¬øQu√© hotel tiene buenas rese√±as y est√° cerca?',
  
  // üçΩÔ∏è Restaurantes (en tiempo real)
  '¬øQu√© restaurantes est√°n abiertos cerca de m√≠?',
  '¬øD√≥nde puedo almorzar ahora?',
  '¬øD√≥nde puedo cenar ahora?',
  '¬øHay comida t√≠pica cerca de aqu√≠?',
  '¬øQu√© restaurantes tienen buena calificaci√≥n y est√°n cerca?',
  '¬øD√≥nde puedo comer r√°pido cerca de mi ubicaci√≥n?',
  
  // üç∏ Bares y Vida Nocturna (en tiempo real)
  '¬øQu√© bares est√°n abiertos cerca de m√≠ ahora?',
  '¬øD√≥nde puedo tomar algo cerca?',
  '¬øD√≥nde hay m√∫sica en vivo esta noche?',
  '¬øQu√© lugar tiene ambiente para salir ahora mismo?',
  '¬øHay alg√∫n bar con terraza abierto cerca?',
  
  // üñºÔ∏è Museos y Cultura (en tiempo real)
  '¬øQu√© museos est√°n abiertos hoy?',
  '¬øD√≥nde hay museos cerca de m√≠?',
  '¬øQu√© exposici√≥n puedo visitar ahora?',
  '¬øQu√© lugares culturales hay cerca?',
  '¬øQu√© actividades culturales hay hoy?',
  
  // üåÑ Lugares tur√≠sticos y naturales (en tiempo real)
  '¬øQu√© sitios tur√≠sticos hay cerca de m√≠?',
  '¬øD√≥nde puedo ir a pasear ahora?',
  '¬øQu√© lugares son buenos para visitar esta tarde?',
  '¬øD√≥nde puedo ver el atardecer cerca?',
  '¬øQu√© tour est√° saliendo en este momento o pronto?',
  
  // üîÅ Otras preguntas √∫tiles al instante
  '¬øQu√© est√° abierto cerca de m√≠?',
  '¬øD√≥nde puedo ir ahora sin reserva?',
  '¬øQu√© eventos hay hoy cerca?',
  '¬øHay alg√∫n sitio seguro para caminar cerca de aqu√≠?',
  '¬øD√≥nde puedo encontrar un lugar tranquilo cerca de m√≠?'
];

async function testRealTimeQuery(message, index) {
    const testLocation = {
        lat: 10.4236,
        lng: -75.5378,
        city: 'Cartagena'
    };
    
    console.log(`\nüîç [${index + 1}/${testQueries.length}] PROBANDO: "${message}"`);
    
    return new Promise((resolve, reject) => {
        const req = {
            body: {
                message,
                sessionId: `test-realtime-${index}`,
                location: testLocation
            }
        };
        
        const res = {
            status: (code) => ({
                json: (data) => {
                    if (code === 200) {
                        // Analizar la respuesta para ver si detect√≥ tiempo real
                        const isRealTimeDetected = data.realTimeContext || 
                            (data.searchMetadata && data.searchMetadata.is_real_time_search) ||
                            (data.searchMetadata && data.searchMetadata.searchType === 'real_time_proximity');
                        
                        console.log(`‚úÖ Respuesta exitosa - Lugares encontrados: ${data.places?.length || 0}`);
                        
                        if (isRealTimeDetected) {
                            console.log(`üöÄ ¬°TIEMPO REAL DETECTADO! Urgencia: ${data.realTimeContext?.urgency || 'N/A'}`);
                        } else {
                            console.log(`‚ö†Ô∏è  B√∫squeda normal (no se detect√≥ tiempo real)`);
                        }
                        
                        resolve({
                            success: true,
                            placesFound: data.places?.length || 0,
                            realTimeDetected: isRealTimeDetected,
                            urgency: data.realTimeContext?.urgency,
                            searchType: data.searchMetadata?.searchType
                        });
                    } else {
                        reject(new Error(`HTTP ${code}: ${JSON.stringify(data)}`));
                    }
                    return data;
                }
            })
        };
        
        handleChatRequest(req, res).catch(reject);
    });
}

async function runAllTests() {
    console.log('üöÄ === INICIANDO TESTS DE CONSULTAS EN TIEMPO REAL ===');
    console.log(`Total de consultas a probar: ${testQueries.length}\n`);
    
    const results = [];
    let realTimeDetected = 0;
    let totalPlaces = 0;
    
    for (let i = 0; i < testQueries.length; i++) {
        try {
            const result = await testRealTimeQuery(testQueries[i], i);
            results.push(result);
            
            if (result.realTimeDetected) {
                realTimeDetected++;
            }
            totalPlaces += result.placesFound;
            
            // Peque√±a pausa entre consultas para no sobrecargar las APIs
            await new Promise(resolve => setTimeout(resolve, 1000));
            
        } catch (error) {
            console.error(`‚ùå Error: ${error.message}`);
            results.push({
                success: false,
                error: error.message
            });
        }
    }
    
    // Resumen final
    console.log('\nüìä === RESUMEN DE RESULTADOS ===');
    console.log(`Total consultas: ${testQueries.length}`);
    console.log(`Consultas exitosas: ${results.filter(r => r.success).length}`);
    console.log(`Tiempo real detectado: ${realTimeDetected} consultas`);
    console.log(`Total lugares encontrados: ${totalPlaces}`);
    console.log(`Promedio lugares por consulta: ${(totalPlaces / results.filter(r => r.success).length).toFixed(1)}`);
    
    // An√°lisis de detecci√≥n por categor√≠a
    const categoryStats = {
        'hoteles': 0,
        'restaurantes': 0,
        'bares': 0,
        'museos': 0,
        'tur√≠sticos': 0,
        'otros': 0
    };
    
    testQueries.forEach((query, index) => {
        if (!results[index]?.realTimeDetected) return;
        
        if (query.includes('hotel')) categoryStats.hoteles++;
        else if (query.includes('restaurante') || query.includes('comer') || query.includes('almorzar') || query.includes('cenar')) categoryStats.restaurantes++;
        else if (query.includes('bar') || query.includes('tomar') || query.includes('m√∫sica')) categoryStats.bares++;
        else if (query.includes('museo') || query.includes('cultural') || query.includes('exposici√≥n')) categoryStats.museos++;
        else if (query.includes('tur√≠stico') || query.includes('pasear') || query.includes('tour')) categoryStats.tur√≠sticos++;
        else categoryStats.otros++;
    });
    
    console.log('\nüìà Detecci√≥n por categor√≠a:');
    Object.entries(categoryStats).forEach(([cat, count]) => {
        console.log(`  ${cat}: ${count} consultas`);
    });
    
    console.log('\n‚úÖ Test completado');
}

runAllTests()
    .then(() => {
        console.log('\nüéâ Todos los tests finalizados exitosamente');
        process.exit(0);
    })
    .catch(error => {
        console.error('\nüí• Error fatal en tests:', error);
        process.exit(1);
    });
